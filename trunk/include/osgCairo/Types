// -*-c++-*- osgCairo - Copyright (C) 2006 Jeremy Moles

#ifndef OSGCAIRO_TYPES
#define OSGCAIRO_TYPES

#include <string>
#include <cairo.h>

namespace osgCairo {

// These are types that I will also create osgCairo class wrappers for.	
typedef cairo_pattern_t        CairoPattern;
typedef cairo_path_t           CairoPath;
typedef cairo_path_data_t      CairoPathData;
typedef cairo_path_data_type_t CairoPathDataType;
typedef cairo_glyph_t          CairoGlyph;
typedef cairo_matrix_t         CairoMatrix;

// These are types that I will use directly w/out creating wrappers. For the most
// part, they are all just C enum's anyway.
typedef cairo_surface_t      CairoSurface;
typedef cairo_t              CairoContext;
typedef cairo_status_t       CairoStatus;
typedef cairo_pattern_type_t CairoPatternType;
typedef cairo_content_t      CairoContent;
typedef cairo_antialias_t    CairoAntialias;
typedef cairo_fill_rule_t    CairoFillRule;
typedef cairo_line_cap_t     CairoLineCap;
typedef cairo_line_join_t    CairoLineJoin;
typedef cairo_operator_t     CairoOperator;
typedef cairo_extend_t       CairoExtend;
typedef cairo_filter_t       CairoFilter;

// I thought I might just use std::map's here; is that a better idea than these
// boring, silly functions?
CairoPatternType stringToPatternType (const std::string&);
CairoContent     stringToContent     (const std::string&);
CairoAntialias   stringToAntialias   (const std::string&);
CairoFillRule    stringToFillRule    (const std::string&);
CairoLineCap     stringToLineCap     (const std::string&);
CairoLineJoin    stringToLineJoin    (const std::string&);
CairoOperator    stringToOperator    (const std::string&);
CairoExtend      stringToExtend      (const std::string&);
CairoFilter      stringToFilter      (const std::string&);

} // namespace osgCairo

#endif
